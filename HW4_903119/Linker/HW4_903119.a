;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 4/13/2015
;Author  : ROOT
;Company : eng
;Comments:
;
;
;Chip type               : ATmega64
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*****************************************************/
;
;#include <mega64.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdlib.h>
;#include <stdio.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART0 Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
;#else
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;#endif
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 0051 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0052 char status,data;
; 0000 0053 char message;
; 0000 0054 char lcd_buffer[16];
; 0000 0055 status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;	message -> R19
;	lcd_buffer -> Y+4
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0056 data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0057 
; 0000 0058 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0059    {
; 0000 005A    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 005B #if RX_BUFFER_SIZE0 == 256
; 0000 005C    // special case for receiver buffer size=256
; 0000 005D    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0000 005E #else
; 0000 005F    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0060    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0061       {
; 0000 0062       rx_counter0=0;
;PCODE: $00000026 VOL: 0
; 0000 0063       rx_buffer_overflow0=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0064       }
; 0000 0065 #endif
; 0000 0066    }
;PCODE: $0000002A VOL: 0
; 0000 0067    lcd_clear();
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0068               message=getchar();
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0069               lcd_gotoxy(0,1);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 006A               lcd_puts("Rec:");
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 006B               lcd_gotoxy(5,1);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 006C               itoa(message,lcd_buffer);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 006D               lcd_puts(lcd_buffer);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 006E }
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0

	.DSEG
_0x6:
	.BYTE 0x5
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0075 {

	.CSEG
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0076 char data;
; 0000 0077 while (rx_counter0==0);
;PCODE: $00000048 VOL: 0
;	data -> R17
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0078 data=rx_buffer0[rx_rd_index0++];
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0079 #if RX_BUFFER_SIZE0 != 256
; 0000 007A if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 007B #endif
; 0000 007C #asm("cli")
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
	cli
;PCODE: $00000059 VOL: 0
; 0000 007D --rx_counter0;
;PCODE: $0000005A VOL: 0
; 0000 007E #asm("sei")
;PCODE: $0000005B VOL: 0
	sei
;PCODE: $0000005C VOL: 0
; 0000 007F return data;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0080 }
;PCODE: $00000060 VOL: 0
;#pragma used-
;#endif
;
;// USART0 Transmitter buffer
;#define TX_BUFFER_SIZE0 8
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0 <= 256
;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
;#else
;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
;#endif
;
;// USART0 Transmitter interrupt service routine
;interrupt [USART0_TXC] void usart0_tx_isr(void)
; 0000 0090 {
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0091 if (tx_counter0)
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0092    {
; 0000 0093    --tx_counter0;
;PCODE: $00000065 VOL: 0
; 0000 0094    UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0095 #if TX_BUFFER_SIZE0 != 256
; 0000 0096    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0097 #endif
; 0000 0098    }
;PCODE: $00000070 VOL: 0
; 0000 0099 }
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART0 Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 00A0 {
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00A1 while (tx_counter0 == TX_BUFFER_SIZE0);
;PCODE: $00000077 VOL: 0
;	c -> Y+0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00A2 #asm("cli")
;PCODE: $0000007E VOL: 0
	cli
;PCODE: $0000007F VOL: 0
; 0000 00A3 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00A4    {
; 0000 00A5    tx_buffer0[tx_wr_index0++]=c;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00A6 #if TX_BUFFER_SIZE0 != 256
; 0000 00A7    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00A8 #endif
; 0000 00A9    ++tx_counter0;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00AA    }
; 0000 00AB else
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00AC    UDR0=c;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00AD #asm("sei")
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
	sei
;PCODE: $00000099 VOL: 0
; 0000 00AE }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Declare your global variables here
;
;void main(void)
; 0000 00B8 { int key_pressed;
;PCODE: $0000009D VOL: 0
; 0000 00B9 int sendbuffer;
; 0000 00BA char lcd_buffer[16];
; 0000 00BB int index=4;
; 0000 00BC int state_flag=0;
; 0000 00BD int ok=0;
; 0000 00BE sendbuffer=0;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;	key_pressed -> R16,R17
;	sendbuffer -> R18,R19
;	lcd_buffer -> Y+4
;	index -> R20,R21
;	state_flag -> Y+2
;	ok -> Y+0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00BF // Declare your local variables here
; 0000 00C0 
; 0000 00C1 // Input/Output Ports initialization
; 0000 00C2 // Port A initialization
; 0000 00C3 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00C4 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00C5 PORTA=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00C6 DDRA=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00C7 
; 0000 00C8 // Port B initialization
; 0000 00C9 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00CA // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00CB PORTB=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00CC DDRB=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00CD 
; 0000 00CE // Port C initialization
; 0000 00CF // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 00D0 // State7=T State6=T State5=T State4=T State3=0 State2=0 State1=0 State0=0
; 0000 00D1 PORTC=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00D2 DDRC=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00D3 
; 0000 00D4 // Port D initialization
; 0000 00D5 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00D6 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00D7 PORTD=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00D8 DDRD=0x0F;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00D9 
; 0000 00DA // Port E initialization
; 0000 00DB // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00DC // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00DD PORTE=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00DE DDRE=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00DF 
; 0000 00E0 // Port F initialization
; 0000 00E1 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00E2 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00E3 PORTF=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00E4 DDRF=0x00;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00E5 
; 0000 00E6 // Port G initialization
; 0000 00E7 // Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00E8 // State4=T State3=T State2=T State1=T State0=T
; 0000 00E9 PORTG=0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00EA DDRG=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00EB 
; 0000 00EC // Timer/Counter 0 initialization
; 0000 00ED // Clock source: System Clock
; 0000 00EE // Clock value: Timer 0 Stopped
; 0000 00EF // Mode: Normal top=0xFF
; 0000 00F0 // OC0 output: Disconnected
; 0000 00F1 ASSR=0x00;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00F2 TCCR0=0x00;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00F3 TCNT0=0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00F4 OCR0=0x00;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00F5 
; 0000 00F6 // Timer/Counter 1 initialization
; 0000 00F7 // Clock source: System Clock
; 0000 00F8 // Clock value: Timer1 Stopped
; 0000 00F9 // Mode: Normal top=0xFFFF
; 0000 00FA // OC1A output: Discon.
; 0000 00FB // OC1B output: Discon.
; 0000 00FC // OC1C output: Discon.
; 0000 00FD // Noise Canceler: Off
; 0000 00FE // Input Capture on Falling Edge
; 0000 00FF // Timer1 Overflow Interrupt: Off
; 0000 0100 // Input Capture Interrupt: Off
; 0000 0101 // Compare A Match Interrupt: Off
; 0000 0102 // Compare B Match Interrupt: Off
; 0000 0103 // Compare C Match Interrupt: Off
; 0000 0104 TCCR1A=0x00;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0105 TCCR1B=0x00;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0106 TCNT1H=0x00;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0107 TCNT1L=0x00;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0108 ICR1H=0x00;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0109 ICR1L=0x00;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 010A OCR1AH=0x00;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 010B OCR1AL=0x00;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 010C OCR1BH=0x00;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 010D OCR1BL=0x00;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 010E OCR1CH=0x00;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 010F OCR1CL=0x00;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0110 
; 0000 0111 // Timer/Counter 2 initialization
; 0000 0112 // Clock source: System Clock
; 0000 0113 // Clock value: Timer2 Stopped
; 0000 0114 // Mode: Normal top=0xFF
; 0000 0115 // OC2 output: Disconnected
; 0000 0116 TCCR2=0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0117 TCNT2=0x00;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0118 OCR2=0x00;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0119 
; 0000 011A // Timer/Counter 3 initialization
; 0000 011B // Clock source: System Clock
; 0000 011C // Clock value: Timer3 Stopped
; 0000 011D // Mode: Normal top=0xFFFF
; 0000 011E // OC3A output: Discon.
; 0000 011F // OC3B output: Discon.
; 0000 0120 // OC3C output: Discon.
; 0000 0121 // Noise Canceler: Off
; 0000 0122 // Input Capture on Falling Edge
; 0000 0123 // Timer3 Overflow Interrupt: Off
; 0000 0124 // Input Capture Interrupt: Off
; 0000 0125 // Compare A Match Interrupt: Off
; 0000 0126 // Compare B Match Interrupt: Off
; 0000 0127 // Compare C Match Interrupt: Off
; 0000 0128 TCCR3A=0x00;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0129 TCCR3B=0x00;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 012A TCNT3H=0x00;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 012B TCNT3L=0x00;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 012C ICR3H=0x00;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 012D ICR3L=0x00;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 012E OCR3AH=0x00;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 012F OCR3AL=0x00;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0130 OCR3BH=0x00;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0131 OCR3BL=0x00;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0132 OCR3CH=0x00;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0133 OCR3CL=0x00;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0134 
; 0000 0135 // External Interrupt(s) initialization
; 0000 0136 // INT0: Off
; 0000 0137 // INT1: Off
; 0000 0138 // INT2: Off
; 0000 0139 // INT3: Off
; 0000 013A // INT4: Off
; 0000 013B // INT5: Off
; 0000 013C // INT6: Off
; 0000 013D // INT7: Off
; 0000 013E EICRA=0x00;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 013F EICRB=0x00;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0140 EIMSK=0x00;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0141 
; 0000 0142 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0143 TIMSK=0x00;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0144 
; 0000 0145 ETIMSK=0x00;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0146 
; 0000 0147 // USART0 initialization
; 0000 0148 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0149 // USART0 Receiver: On
; 0000 014A // USART0 Transmitter: On
; 0000 014B // USART0 Mode: Asynchronous
; 0000 014C // USART0 Baud Rate: 9600
; 0000 014D UCSR0A=0x00;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 014E UCSR0B=0xD8;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 014F UCSR0C=0x06;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0150 UBRR0H=0x00;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0151 UBRR0L=0x33;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0152 
; 0000 0153 // USART1 initialization
; 0000 0154 // USART1 disabled
; 0000 0155 UCSR1B=0x00;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0156 
; 0000 0157 // Analog Comparator initialization
; 0000 0158 // Analog Comparator: Off
; 0000 0159 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 015A ACSR=0x80;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 015B SFIOR=0x00;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 015C 
; 0000 015D // ADC initialization
; 0000 015E // ADC disabled
; 0000 015F ADCSRA=0x00;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0160 
; 0000 0161 // SPI initialization
; 0000 0162 // SPI disabled
; 0000 0163 SPCR=0x00;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0164 
; 0000 0165 // TWI initialization
; 0000 0166 // TWI disabled
; 0000 0167 TWCR=0x00;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0168 
; 0000 0169 // Alphanumeric LCD initialization
; 0000 016A // Connections are specified in the
; 0000 016B // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 016C // RS - PORTA Bit 0
; 0000 016D // RD - PORTA Bit 1
; 0000 016E // EN - PORTA Bit 2
; 0000 016F // D4 - PORTA Bit 4
; 0000 0170 // D5 - PORTA Bit 5
; 0000 0171 // D6 - PORTA Bit 6
; 0000 0172 // D7 - PORTA Bit 7
; 0000 0173 // Characters/line: 16
; 0000 0174 lcd_init(16);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0175 
; 0000 0176 // Global enable interrupts
; 0000 0177 #asm("sei")
;PCODE: $00000127 VOL: 0
	sei
;PCODE: $00000128 VOL: 0
; 0000 0178   lcd_gotoxy(0,0);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0179   lcd_puts("send:");
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 017A while (1)
;PCODE: $00000130 VOL: 0
; 0000 017B       {   if(state_flag==0 && ok==0){
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 017C           PORTD.0=1;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 017D           PORTD.1=0;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 017E           PORTD.2=0;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 017F           PORTD.3=0;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 0180           delay_ms(1);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 0181           if(PIND.4==1)
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 0182           {key_pressed=7;sendbuffer=10*sendbuffer+key_pressed;index=index+1;state_flag=1;}
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0183           if(PIND.5==1)
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0184           {key_pressed=8;sendbuffer=10*sendbuffer+key_pressed;index=index+1;state_flag=1;}
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 0185           if(PIND.6==1)
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 0186           {key_pressed=9;sendbuffer=10*sendbuffer+key_pressed;index=index+1;state_flag=1;}
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 0187 
; 0000 0188         // for stage tow PORTD.1=1
; 0000 0189         //*********************************
; 0000 018A 
; 0000 018B 
; 0000 018C               PORTD.0=0;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 018D               PORTD.1=1;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 018E               PORTD.2=0;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 018F               PORTD.3=0;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 0190                delay_ms(1);
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0191               if(PIND.4==1)
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0192               {key_pressed=4;sendbuffer=10*sendbuffer+key_pressed;index=index+1;state_flag=1;}
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0193               if(PIND.5==1)
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0194               {key_pressed=5;sendbuffer=10*sendbuffer+key_pressed;index=index+1;state_flag=1;}
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 0195               if(PIND.6==1)
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 0196               {key_pressed=6;sendbuffer=10*sendbuffer+key_pressed;index=index+1;state_flag=1;}
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 0197         // for stage three PORTD.2=1
; 0000 0198         //*********************************
; 0000 0199 
; 0000 019A 
; 0000 019B               PORTD.0=0;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 019C               PORTD.1=0;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 019D               PORTD.2=1;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 019E               PORTD.3=0;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 019F                delay_ms(1);
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 01A0               if(PIND.4==1)
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 01A1               {key_pressed=1;sendbuffer=10*sendbuffer+key_pressed;index=index+1;state_flag=1;}
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 01A2               if(PIND.5==1)
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 01A3               {key_pressed=2;sendbuffer=10*sendbuffer+key_pressed;index=index+1;state_flag=1;}
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 01A4               if(PIND.6==1)
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 01A5               {key_pressed=3; sendbuffer=10*sendbuffer+key_pressed;index=index+1;state_flag=1;}
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 01A6 
; 0000 01A7         // for stage four PORTD.3=1
; 0000 01A8         //*********************************
; 0000 01A9 
; 0000 01AA 
; 0000 01AB               PORTD.0=0;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 01AC               PORTD.1=0;
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 01AD               PORTD.2=0;
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 01AE               PORTD.3=1;
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 01AF                delay_ms(1);
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 01B0               if(PIND.6==1)
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 01B1               {key_pressed=10;sendbuffer=10*sendbuffer+key_pressed;index=index+1;state_flag=1;}
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 01B2               if(PIND.5==1)
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 01B3               {key_pressed=0;sendbuffer=10*sendbuffer+key_pressed;index=index+1;state_flag=1;}
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 01B4               if(PIND.4==1)
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 01B5               {
; 0000 01B6               lcd_gotoxy(0,0);
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 01B7               lcd_clear();
;PCODE: $00000213 VOL: 0
; 0000 01B8               lcd_putsf("sending");
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 01B9               delay_ms(100);
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 01BA               putchar(sendbuffer);
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 01BB               lcd_clear();
;PCODE: $0000021C VOL: 0
; 0000 01BC               lcd_gotoxy(0,0);
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 01BD              lcd_puts("send:");
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 01BE              sendbuffer=0;
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 01BF              index=4;
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 01C0 
; 0000 01C1               }
; 0000 01C2 
; 0000 01C3                if(state_flag==1)
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 01C4              {lcd_gotoxy(0,0);
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 01C5              lcd_puts("send:");
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 01C6               lcd_gotoxy(index,0);
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 01C7               itoa(key_pressed,lcd_buffer);
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 01C8               lcd_puts(lcd_buffer);
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 01C9               state_flag=0;
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 01CA               delay_ms(80);  }
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 01CB                  }
;PCODE: $00000240 VOL: 0
; 0000 01CC 
; 0000 01CD       }
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 01CE }
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0

	.DSEG
_0x15:
	.BYTE 0x12
